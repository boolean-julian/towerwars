package towerwarspp.board;

/** Klasse, die f&uuml;r TowerWarsPP ein Spielbrett-Objekt erzeugt und von BasicBoard.java erbt.
 *	Dar&uuml;ber hinaus liefert diese Klasse Methoden, die alle m&ouml;glichen Spielz&uuml;ge ausgibt und diese anhand einer
 *	simplen Strategie bewertet.
 *
 *	@author Julian L&uuml;ken
 */
import towerwarspp.preset.*;
import java.util.*;
public class ExtendedBoard extends BasicBoard {
	/** Konstruktor, der die Spielfeldgr&ouml;&szlig; entgegennimmt und ein neues Spielbrett instanziert wie BasicBoard.java,
	 *	@param size Gr&ouml;&szlig;e des Spielbretts
	 */
	public ExtendedBoard(int size) {
		super(size);
	}
	
	public ExtendedBoard() {}

	/** Methode, die alle m&ouml;glichen und erlaubten Spielz&uuml;ge eines Spielers als Liste ausgibt
	 *	@param col Spielerfarbe
	 *	@return Liste der Spielz&uuml;ge
	 */
	public List<Move> getLegalMoves(PlayerColor col) {
		LinkedList<Move> moveList = new LinkedList<Move>();
		LinkedList<Position> posList;
		Move move;
		Token startToken;
		for (int i = 0; i < getSize(); i++) {
			for (int j = 0; j < getSize(); j++) {
				startToken = roster[i][j];
				if (startToken != null && startToken.getType() != TokenType.BASE && startToken.getColor() == col ) {
					posList = getNeighborhood(new Position(i+1, j+1), startToken.getRange());
					for ( Position pos : posList ) {
						move = new Move(new Position(i+1,j+1), pos);
						if (isLegal(move)) {
							moveList.add(move);
						}
					}
				}
			}
		}
		return moveList;
	}
						
	/*
		for (int k = 0; k < size; k++) {
			for (int h = 0; h < size; h++) {
				move = new Move(new Position(i+1,j+1), new Position(k+1,h+1));
				if (isLegal(move)) {
					moveList.add(move);
				}
			}
		}
	*/
	

	/** Hilfsmethode, die die Nachbarschaft von einer Position ermittelt.
	 *	@param pos Position
	 *	@param range relative Reichweite der Nachbarschaft
	 *	@return Liste der Positionen
	 */
	private LinkedList<Position> getNeighborhood(Position pos, int range) {
		LinkedList<Position> list = new LinkedList<Position>();
		int x = pos.getLetter();
		int y = pos.getNumber();
		int max, min;
		for (int i = -range; i <= range; i++) {
			if ( -range > -i-range ) {
				max = -range;
			}
			else {
				max = -i-range;
			}
			if ( range < -i+range ) {
				min = range;
			}
			else {
				min = -i+range;
			}
			
			for (int j = max; j <= min; j++) {
					list.add(new Position(i,j));
			}
		}
		return list;
	}

	/** Methode f&uuml;r KI-Gegner, die einen Zug bewertet. Dabei wird bewertet, inwiefern der Zug daf&uuml;r sorgt, dass man einen gegnerischen Spielstein bezwingt
	 *	oder sich in Richtung der gegnerischen Basis bewegt. Z&uuml;ge, die das Spiel gewinnen oder das Verlieren vermeiden, werden dabei bevorzugt
	 *	@param move zu bewertender Spielzug
	 *	@return Punktewertung f&uuml;r den Zug. Dabei steht 100 f&uuml;r einen rettenden Zug und 101 f&uuml;r einen gewinnenden Zug
	 */
	public int evaluateMove(Move move) {	
		PlayerColor startColor	= move.getStart().findCell().getToken().getColor();	
		if (isWinning(move,startColor)) { // gewinnender Zug
			return 101;
		}
		if (isSaving(move,startColor)) {	// rettender Zug
			return 100;
		}
		int rbase = 0; // Punkte fuer das Bewegen in Richtung gegnerischer Basis
		int bkick = 0; // Punkte fuer das Schlagen eines Spielsteins
		

		if (startColor == PlayerColor.RED) {
			rbase = getDistance(new Position(getSize(), getSize()),move.getStart()) - getDistance(new Position(getSize(), getSize()), move.getEnd());
		}
		
		else if (startColor == PlayerColor.BLUE) {
			rbase = getDistance(new Position(1, 1),move.getStart()) - getDistance(new Position(1, 1), move.getEnd());
		}

		if (move.getStart().findCell().getToken() != null && move.getEnd().findCell().getToken() != null) {
			PlayerColor endColor	= move.getEnd().findCell().getToken().getColor();
			TokenType 	type		= move.getEnd().findCell().getToken().getType();
			if (endColor != startColor) {
				if (type == TokenType.PAWN) {			// Bauern schlagen
					bkick = 1;
				}
				else if (type == TokenType.TOWER) {	// Turm schlagen
					bkick = 2;
				}
				else if (type == TokenType.BASE) {
					return 101;
				}
			}
		}
		return bkick + rbase;
	}

	/** Hilfsmethode f&uuml;r evaluateMove. Berechnet, ob der Zug gewinnen kann.
	 *	@return true, falls es so ist, sonst false.
	 */
	private boolean isWinning(Move move, PlayerColor color) {
		List<Move> legalMoves = getLegalMoves(color);
		for (Move legalMove : legalMoves) {
			
		}
		return false;
	}
	/** Hilfsmethode f&uuml;r evaluateMove. Berechnet, ob der Zug eine Niederlage verhindern kann
	 *	@return true, falls es so ist, sonst false.
	 */
	private boolean isSaving(Move move, PlayerColor color) {
		List<Move> legalMoves = getLegalMoves(color);
		for (Move legalMove : legalMoves) {
		
		}
		return false;
	}
}
