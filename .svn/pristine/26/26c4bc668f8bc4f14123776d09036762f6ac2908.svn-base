package towerwarspp.board;
import java.util.Scanner;
import java.util.LinkedList;
import towerwarspp.preset.Position;
import towerwarspp.preset.Move;
import towerwarspp.preset.Status;
import towerwarspp.preset.PlayerColor;
import towerwarspp.preset.Viewer;
import towerwarspp.preset.Viewable;
import towerwarspp.io.EinAusgabe;

/**
 * Diese Klasse bildet die grundlegene Implementation des Spielfeldes von Towerwars. Ein neues Spielfeld wird mit einer
 * Groesse zwischen 4 und 26 und der Startverteilung der Spielsteine initialisiert. Auf seine Attribute kann mit Gettern
 * zugegriffen werden und es stellt eine Methode bereit um zu pruefen ob ein Move legal ist und eine Methode, um einen
 * Move auf dem Spielfeld auszufuehren.
 * Die Schnittstelle Viewable wird implementiert um Ausgabe des Spielfeldes zu ermoeglichen
 * @author Marcel Hellwig
 */
public class BasicBoard implements Viewable{
	// Instanzvariablen
    /**
     * size = Die Groesse (Anzahl der Felder pro Kante) des Spielfeldes
     */
	private int size;
    /**
     * roster = Das Raster der Zellen des Spielfeldes
     */
	private Token[][] tokens;
    /**
     * currentPlayer = Farbe des Spielers, der als naechstes an der Reihe ist
     */
	private PlayerColor currentPlayer;
    /**
     * status = Aktueller Status des Spielfeldes
     */
	private Status status;
    /**
     * savedMoves = Liste der letzten gespeicherten Zuege
     */
    private LinkedList<SavedMove> savedMoves;
	/**
	 * turn = Nummer der aktuellen Runde
	 */
	private int turn;

	// Konstruktoren
    /**
     * Konstruktor mit uebergebener Spielfeldgroesse, der das Spielfeld mit Startaufstellung initialisiert
     * @param size = Spielfeldgroesse
     */
	public BasicBoard(int size) {
		//Setzen der Instanzvariablen
		currentPlayer = PlayerColor.RED;
		status = Status.OK;
		savedMoves = new LinkedList<SavedMove>();
		//check auf legale Groesse des Spielbretts
        if (size < 4 || size > 26) {
			throw new IllegalArgumentException("Spielfeldgroesse (" + size + ") muss zwischen 4 und 26 liegen");
		}
		// Spiellbrettgroesse setzen
		this.size = size;
		tokens = new Token[size][size];
		//Iteration der Spielbrettfelder
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				//Board-Positionen
				int letter = i + 1;
				int number = j + 1;
                Token t = null;
				
				//Pawn-Initialisierung fuer Rot
				if(letter + number <= 2 + size / 2 && letter + number > 2) {
					t = new Pawn(new Position(letter, number), PlayerColor.RED, this);
				}
				//Pawn-Initialisierung fuer Blue
				if(letter + number >= 2*size - size / 2 && letter + number < 2 * size) {
					t = new Pawn(new Position(letter, number), PlayerColor.BLUE, this);
				}
				//Base fuer Rot
                if(letter + number == 2) {
                    t = new Base(new Position(letter, number), PlayerColor.RED, this);
                }
                //Base fuer Blau
                if(letter + number == 2 * size) {
                    t = new Base(new Position(letter, number), PlayerColor.BLUE, this);
                }
                tokens[i][j] = t;
			}
		}
	}

	// Setter/Getter
    /**
     * Getter fuer size
     * @return Groesse dieses Spielfeldes
     */
	public int getSize() {return size;}
    /**
     * Getter fuer tokens
     * @return Tokenraster dieses Spielfeldes
     */
	public Token[][] getTokens() {return tokens;}
    /**
     * Getter fuer currentPlayer
     * @return Farbe des Spielers, der aktuell am Zug ist
     */
	public PlayerColor getCurrentPlayer() {return currentPlayer;}
    /**
     * Getter fuer status
     * @return Aktueller Status des Spielfelds
     */
	public Status getStatus() {return status;}
    /**
     * Getter fuer savedMoves
     * @return Gespeicherte Zuege dieses Spiels
     */
    public LinkedList<SavedMove> getSavedMoves() {return savedMoves;}
	/**
	 * Getter fuer turn
	 * @return bisherige Rundenanzahl dieses Spiels
	 */
	public int getTurn() {return turn;}

	// Methoden
    /**
     * Diese Methode dient dazu in executeMove den ausgefuehrten Zug zu speichern
     * @param move = ausgefuehrter Zug
     */
    private void updateSavedMoves(Move move) {
        SavedMove last = new SavedMove(move, this);
        savedMoves.add(last);
        // Begrenzung der Anzahl der gespeicherten Zuege
        if(savedMoves.size() > 5) {
            savedMoves.removeFirst();
        }
    }

    /**
     * Diese Methode dient dazu am Ende von executeMove den Status des Spielfeldes zu setzen
     * @param status = neuer Status
     */
    private void updateState(Status status) {
        this.status = status;
        if(status != Status.OK) {
            return;
        }
        //Wenn der jetzige Player rot ist setze auf blau bei true, ansonsten auf rot
        currentPlayer = (currentPlayer == PlayerColor.RED) ? PlayerColor.BLUE : PlayerColor.RED;
		if(!hasLegalMove()) {
			status = (currentPlayer == PlayerColor.RED) ? Status.BLUE_WIN : Status.RED_WIN;
		}
    }

    /**
     * Diese Methode gibt das Token zurueck, die sich im Raster an der uebergebenen Position befindet.
     * Wenn die Position nicht innerhalb des Spielfeldes liegt wird eine IllegalArgumentException geworfen
     * @param position = Position, deren Zelle ermittelt werden soll
     * @return Token, das sich an der uebergebenen Position befindet
     */
    public Token findToken(Position position) throws IllegalArgumentException {
    	//Token ausserhalb des Spielfelds
        if(position.getLetter() > size || position.getNumber() > size) {
            throw new IllegalArgumentException(position + "ist nicht im Spielfeld enthalten, hat also kein zugeordnetes Token");
        }
        //ArrayIndex startet bei 0
        return tokens[position.getLetter() - 1][ position.getNumber() - 1];
    }

    /**
     * Die Methode prueft den Abstand von zwei Positionen, wobei der Abstand die minimale Anzahl der
     * Schritte zu Nachbarfeldern ist, die benoetigt wird um von Position a zu Position b zu kommen
     * @param a = Erste Position
     * @param b = Zweite Position
     * @return Abstand der beiden Positionen
     */
    public int getDistance(Position a, Position b) {
        return (Math.abs(a.getLetter() - b.getLetter()) + Math.abs(a.getLetter() + a.getNumber() - b.getLetter() - b.getNumber()) + Math.abs(a.getNumber() - b.getNumber())) / 2;
    }

    /**
     * Diese Methode testet ob der uebergebene Zug auf dem Brett aktuell legal ist oder nicht
     * @param move = Zug, der auf Legalitaet geprueft werden soll
     * @return true, wenn der Zug legal ist, false sonst
     */
    public boolean isLegal(Move move) {
		// Aufgabe ist erlaubt
        if(move == null) {
            return true;
        }
        Position start = move.getStart(), end = move.getEnd();
        // Start- und Endposition muessen im Feld liegen
        if(start.getNumber() < 1 || start.getNumber() > size ||
           start.getLetter() < 1 || start.getLetter() > size ||
           end.getNumber() < 1 || end.getNumber() > size ||
           end.getLetter() < 1 || end.getLetter() > size) {
           
            return false;
        }
        Token act = findToken(start);
		// Zuege koennen nicht auf dem gleichen Feld starten und enden
        if(start.equals(end)) {
            return false;
        }
		// Zuege koennen nicht auf einem leeren Feld starten
        if(act == null) {
            return false;
        }
		// Nur der Spieler, der an der Reihe ist darf Zuege ausfuehren
        if(act.getColor() != currentPlayer) {
            return false;
        }
		// Die Basis kann nicht bewegt werden
        if(act.getType() == TokenType.BASE) {
            return false;
        }
		// Das Token ist ein eigener Pawn
        if(act.getType() == TokenType.PAWN) {
			// Der Pawn hat nicht ausreichend Zugreichweite
            if(act.getRange() < getDistance(start, end)) {
                return false;
            }
            Token t = findToken(end);
			// Ein Pawn kann sich auf leere Felder bewegen
            if(t == null) {
                return true;
            }
            // Zuege auf gegnerische Tokens sind moeglich, ausser Fernzuege auf blockierte Tuerme
            if(t.getColor() != currentPlayer) {
                if(t.getType() == TokenType.TOWER && ((Tower)t).isBlocked() && getDistance(start, end) != 1) {
                    return false;
                }
                return true;
            }
			// nur die eigene Basis und nicht blockierte Tuerme maximaler Hoehe blockieren Zuege auf eigene Token
            if(t.getType() == TokenType.BASE || (t.getType() == TokenType.TOWER && ((!((Tower)t).isBlocked()) && ((Tower)t).getHeight() == size / 3))) {
                return false;
            }
            return true;
        }
		// Das Token ist ein eigener Tower
		// Die Zuege von Tuermen koennen nur Weite 1 haben
        if(getDistance(start, end) == 1) {
            Token t = findToken(end);
			// Abbau auf leere Felder ist erlaubt
            if(t == null) {
                return true;
            }
			// Gegnerische Tokens blockieren den Abbau eines Turms
            if(t.getColor() != currentPlayer) {
                return false;
            }
			// Die eigene Basis und nicht blockierte Tuerme maximaler Hoehe blockieren den Abbau des Turms
            if(t.getType() == TokenType.BASE || (t.getType() == TokenType.TOWER && ((Tower)t).getHeight() == size / 3 && ((Tower)t).isBlocked() == false)) {
                return false;
            }
			// sonst ist Abbau erlaubt
            return true;
        }
        return false;
    }

    /**
     * Diese Methode fuehrt den uebergebenen Zug aus, sofern dieser legal ist und updated den Status des Spielfeldes
     * Ein null-Zug wird als Aufgabe gewertet.
     * @param move = auszufuehrender Zug
     */
	public void executeMove(Move move) {
        // Betrachten der Sonderfaelle m == null und m ist illegal
		if(!(isLegal(move))) {
            // Falls der Move nicht legal ist, wird der Status auf illegal gesetzt
            updateSavedMoves(new Move(new Position(1,1), new Position(1,1)));
            updateState(Status.ILLEGAL);
            return;
        }
        if(move == null) {
            // Wenn ein Spieler aufgibt, dann gewinnt der andere
            updateSavedMoves(new Move(new Position(size, size), new Position(size,size)));
            if(currentPlayer == PlayerColor.RED) {
                updateState(Status.BLUE_WIN);
            } else {
                updateState(Status.RED_WIN);
            }
            return;
        }
        Position start = move.getStart(), end = move.getEnd();
        Token startToken = findToken(start), endToken = findToken(end);
        updateSavedMoves(move);
        // Zug eines Pawns
        if(startToken.getType() == TokenType.PAWN) {
            // Entfernen des Pawns vom Startfeld
            tokens[start.getLetter() - 1][start.getNumber() - 1] = null;
            // Falls das Zielfeld leer ist oder ein gegnerischer Pawn darauf steht Pawn aufs Zielfeld setzen
            if(endToken == null || (endToken.getType() == TokenType.PAWN && endToken.getColor() != currentPlayer)) {
                startToken.setPosition(end);
                tokens[end.getLetter() - 1][end.getNumber() - 1] = startToken;
                updateState(Status.OK);
                return;
            }
            // Falls auf dem Ziel ein eigener Pawn steht wird ein neuer Turm gebaut
            if(endToken.getType() == TokenType.PAWN) {
                Tower t = new Tower(end, currentPlayer, this);
                tokens[end.getLetter() - 1][end.getNumber() - 1] = t;
                updateState(Status.OK);
                return;
            }
            // Falls auf dem Zielfeld ein eigener Turm steht
            if(endToken.getType() == TokenType.TOWER && endToken.getColor() == currentPlayer) {
                if(((Tower)endToken).isBlocked()) {
                    // Falls er blockiert ist wird die Blockade aufgehoben
                    ((Tower)endToken).setBlocked(false);
                } else {
                    // Falls er nicht blockiert ist wird seine Hoehe erhoeht
                    ((Tower)endToken).setHeight(((Tower)endToken).getHeight() + 1);
                }
                updateState(Status.OK);
                return;
            }
            // Falls auf dem Zielfeld ein gegnerischer Turm steht
            if(endToken.getType() == TokenType.TOWER) {
                // Falls ein Nahzug stattfindet wird der Turm geschlagen, sonst blockiert
                if(getDistance(start, end) == 1) {
                    startToken.setPosition(end);
                    tokens[end.getLetter() - 1][end.getNumber() - 1] = startToken;
                } else {
                    ((Tower)endToken).setBlocked(true);
                }
                updateState(Status.OK);
                return;
            }
            // Falls auf dem Zielfeld die gegnerische Basis steht wird das Spiel gewonnen
            if(endToken.getType() == TokenType.BASE) {
                tokens[end.getLetter() - 1][end.getNumber() - 1] = startToken;
                startToken.setPosition(end);
                updateState((currentPlayer == PlayerColor.RED) ? Status.RED_WIN : Status.BLUE_WIN);
                return;
            }
            throw new RuntimeException("Der Zug wurde vom executeMove-Algorithmus nicht erfasst");
        }
        // Zug eines Towers, Veringerung der Hoehe des Turms
        if(((Tower)startToken).getHeight() == 1) {
            Pawn p = new Pawn(start, currentPlayer, this);
            tokens[start.getLetter() - 1][start.getNumber() - 1] = p;   
        } else {
            ((Tower)startToken).setHeight(((Tower)startToken).getHeight() - 1);
        }
        // Falls das Zielfeld leer ist wird dort ein Pawn gesetzt
        if(endToken == null) {
            Pawn p = new Pawn(end, currentPlayer, this);
            tokens[end.getLetter() - 1][end.getNumber() - 1] = p;
            updateState(Status.OK);
            return;
        }
        // Falls auf dem Zielfeld ein eigener Pawn steht, entsteht dort ein Turm
        if(endToken.getType() == TokenType.PAWN) {
            Tower t = new Tower(end, currentPlayer, this);
            tokens[end.getLetter() - 1][end.getNumber() - 1] = t;
            updateState(Status.OK);
            return;
        }
        // Falls auf dem Zielfeld ein eigener Tower steht
        if(endToken.getType() == TokenType.TOWER) {
            // Falls er blockiert ist wird die Blockade aufgehoben, sonst erhoeht
            if(((Tower)endToken).isBlocked()) {
                ((Tower)endToken).setBlocked(false);
            } else {
                ((Tower)endToken).setHeight((((Tower)endToken).getHeight() + 1));
            }
            updateState(Status.OK);
            return;
        }
        throw new RuntimeException("Der Zug wurde vom executeMove-Algorithmus nicht erfasst");
	}

    /**
     * Die Methode gibt an, ob auf diesem Spielfeld noch ein Zug rueckgaengig gemacht werden kann
     * @return true, wenn noch ein Zug rueckgaengig gemacht werden kann, false sonst
     */
    public boolean canUndoMove() {
        if(savedMoves.isEmpty()) {
            return false;
        }
        return true;
    }

    /**
     * Diese Methode macht den letzten ausgefuehrten Zug rueckgaengig, sofern noch ein Zug gespeichert ist, sonst
     * wird eine IllegalStateException geworfen. Zuege die zur Folge haben, dass ein Spieler das Spiel gewinnt
     * koennen nicht rueckgaengig gemacht werden
     */
    public void undoMove() {
        if(savedMoves.isEmpty()) {
            throw new IllegalStateException("Es kann kein weiterer Zug rueckgaengig gemacht werden");
        }
        SavedMove last = savedMoves.getLast();
        savedMoves.removeLast();
        Position start = last.getStart(), end = last.getEnd();
        this.status = last.getStatus();
        tokens[start.getLetter() - 1][start.getNumber() - 1] = last.getStartToken();
        tokens[end.getLetter() - 1][end.getNumber() - 1] = last.getEndToken();
		currentPlayer = last.getCurrentPlayer();
    }
    /**
     * Diese Methode gibt einen Viewer zurueck, der alle eigenschaften dieses Brettes lesen kann
     */
    public Viewer viewer() {
        return new EinAusgabe(this, new Scanner(System.in));
    }


    /** 
     *  Hilfsmethode, die die Nachbarschaft von einer Position ermittelt. Siehe {@link http://www.redblobgames.com/grids/hexagons/}
     *  @param pos Position
     *  @param range relative Reichweite der Nachbarschaft
     *  @return Liste der Positionen
     */
    public LinkedList<Position> getNeighborhood(Position pos, int range) {
        LinkedList<Position> list = new LinkedList<Position>();
        int x = pos.getLetter();
        int y = pos.getNumber();
        int max, min;
        // in 3D gilt: abstand = max(|dx|,|dy|,|dz|)
        // nun finde alle (x,y,z), fuer die gilt
        // abstand <= range
        // es gilt in 2D fuer alle dx,dy,dz, die die obige Gleichung erfuellen
        // dz = -(dx+dy)
        // fuer mehr siehe http://www.redblobgames.com/grids/hexagons/
        for (int i = -range; i <= range; i++) {
            if ( -range > -i-range ) {
                max = -range;
            }
            else {
                max = -i-range;
            }
            if ( range < -i+range ) {
                min = range;
            }
            else {
                min = -i+range;
            }
            
            for (int j = max; j <= min; j++) {
                if (x+i > 0 && x+i <= getSize() && y+j > 0 && y+j <= getSize() && (i != 0 || j != 0)) {
                    list.add(new Position(x+i,y+j));
                }
            }
        }
        return list;
    }

	/**
	 * Gibt an ob auf dem Spielbrett noch legale Moves sind
	 * @return true wenn legale Moves existierend, sonst false
	 */
	public boolean hasLegalMove() {
		return !legalMoves(false).isEmpty();
	}

	/** Methode, die erlaubte Zuege zurueckgibt
	 *	@param all Falls true werden alle Moves zurueckgegeben, falls false nur einer, wenn er existiert
	 *	@return zurueckgegebene Spielzuege
	 */
	protected LinkedList<Move> legalMoves(boolean all) {
		LinkedList<Move> moveList = new LinkedList<Move>();
		LinkedList<Position> posList;
		Token[][] tokens = getTokens();
		Move move;
		Token startToken;
		//Iteriert über alle möglichen Token
		for (int i = 0; i < getSize(); i++) {
			for (int j = 0; j < getSize(); j++) {
				startToken = tokens[i][j];
				//Wenn der Token den Kriterien entspricht (richtige Farbe, Pawn oder Turm)...
				if (startToken != null && startToken.getType() != TokenType.BASE) {
					//...wird über alle vom Token erreichbaren Felder iteriert und geprüft, ob der zug legal wäre
					posList = getNeighborhood(new Position(i+1, j+1), startToken.getRange());
					for ( Position pos : posList ) {
						move = new Move(new Position(i+1,j+1), pos);
						if (isLegal(move)) {
							moveList.add(move);
							//Entspricht hasLegalMove: Sobald ein möglicher Zug gefunden wird, wird die suche abgebrochen, falls boolean all == false
							if(!all)
								return moveList;
						}
					}
				}
			}
		}
		return moveList;
	}
}
