package towerwarspp.gfx;
/**	Klasse, die Sechsecke darstellt.
 *	Erbt von Polygon
 *	@author Julian L&uuml;ken
 */
import java.awt.*;
import towerwarspp.preset.*;
public class Hexagon extends Polygon {
	// Klassenvariablen
	public static final int SIDES = 6;
	
	// Instanzvariablen
	private Point[] points = new Point[SIDES];
	private Point center = new Point(0,0);
	private int radius;
	private int rotation = 0;
	
	// Konstuktoren
	public Hexagon(Point center, int radius) {
		npoints = SIDES;
		xpoints = new int[SIDES];
		ypoints = new int[SIDES];

		this.center = center;
		this.radius = radius;

		updatePoints();
	}

	public Hexagon(int x, int y, int radius) {
		this(new Point(x,y), radius);
	}

	// Getter, Setter
	public int getRadius() {return radius;}
	public void setRadius(int radius) {
		this.radius = radius;
		updatePoints();
	}

	public int getRotation() {return rotation;}
	public void setRotation(int rotation) {
		this.rotation = rotation;
		updatePoints();
	}

	public void setCenter(Point center) {
		this.center = center;
		updatePoints();
	}

	public void setCenter(int x, int y) {
		setCenter(new Point(x,y));
	}

	// Methoden
	private double findAngle(double fraction) {
		return fraction * Math.PI * 2 + Math.toRadians((rotation + 180) % 360);
	}

	private Point findPoint(double angle) {
		int x = (int) (center.y + Math.sin(angle) * radius);
		int y = (int) (center.x + Math.cos(angle) * radius);
		return new Point(x,y);
	}

	protected void updatePoints() {
		for (int p = 0; p < SIDES; p++) {
			double angle = findAngle((double) p / SIDES);
			Point point = findPoint(angle);
			xpoints[p] = point.x;
			ypoints[p] = point.y;
			points[p] = point;
		}
	}

	public void draw(Graphics2D g, int x, int y, int lineThickness, int colorValue, boolean filled) {
		// Werte speichern
		Stroke tmpS = g.getStroke();
		Color tmpC = g.getColor();
		
		g.setColor(new Color(colorValue));
		g.setStroke(new BasicStroke(lineThickness, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER));
	
		if (filled) {
			g.fillPolygon(xpoints,ypoints,npoints);
		}
		else {
			g.drawPolygon(xpoints,ypoints,npoints);
		}
		// auf alte Werte zuruecksetzen
		g.setColor(tmpC);
		g.setStroke(tmpS);
	}
}
