package towerwarspp.Spieler;
import java.util.Random;
import java.util.LinkedList;
import towerwarspp.preset.*;
import towerwarspp.Exceptions.*;
import towerwarspp.board.*;


public class KrasseCPU extends Spieler {

	//Bestimmt bei gleichwertigen Zuegen zufaellige einen davon
	private Random random;
	private LinkedList<Move> ownMoves = new LinkedList<Move>();
	//Einzelner Spielstein, der zur gegn. Basis losgeschickt wird
	private Token runner = null;
	private ExtendedBoard board;
	boolean hasRunner = false;
	//All non-BASE-Tokens werden hier nach Farbe eingespeichert
	private LinkedList<Token>redTokenList=new LinkedList<Token>();	
	private LinkedList<Token>blueTokenList=new LinkedList<Token>();
	
	int capturePawn = 5000;
	int captureTower = 10000;
	int captureTowerMult = 0;
	int isEndangered = 1000;
	int pawnValue = 0;
	int directionOwnBase = 5;
	int repeatMoveMalus = 30;
	int coveredTiles = 1;
	//Ab so viel Tokens mehr, wird ein runner losgeschickt(additiv)
	int runnerInitFlat = 3;
	//Oder ab so viel Tokens mehr, wird ein runner losgeschickt(multiplikativ)
	int runnerInitMult = 2;
	int runnerBonus = 2000;
	int protectBase = 250;
	
	int repeatedMoves;
	
	/**
	Konstruktor fuer die CPU
	*/
	public KrasseCPU(){
		super();
		random = new Random();
	}
	/**	Ermittelt einen nächsten zufälligen Move
	@return nächster Move
	*/
	@Override
	protected Move getNextMove(){
		board = getBoard();
		int scoreTemp;
		LinkedList<Move> legalMoves = board.getLegalMoves();
		if (legalMoves.isEmpty()){
			return null;
		}
		LinkedList<Move> bestMoves= new LinkedList<Move>();
		bestMoves.add(legalMoves.get(0));
		int bestValue= evaluateMove(bestMoves.get(0));
		for(Move move : legalMoves){
			scoreTemp = evaluateMove(move);
			if(scoreTemp > bestValue){
				bestMoves.clear();
				bestMoves.add(move);
				bestValue=scoreTemp;
			} else if(scoreTemp == bestValue)
				bestMoves.add(move);
		}
		Move bestMove = bestMoves.get(random.nextInt(bestMoves.size()));
		if(!isRepeated(bestMove))
			repeatedMoves = 0;
		else
			repeatedMoves++;
		ownMoves.add(bestMove);
		return bestMove;
	}
	
	/**
	fuegt die farbigen Tokens in die entsprechend gekenntzeichneten Listen hinzu
	*/
	private void addTokensToLists(){
		Token[][] tokens = board.getTokens();
		redTokenList.clear();
		blueTokenList.clear();
		//Iteriert durch das ganze Spielfeld der groesse i*j
		for(int i = 0; i < board.getSize(); i++)
			for(int j = 0; j < board.getSize(); j++){
			
				//Wenn ein Token sich auf dem Feld befindet
				if(tokens[i][j] != null && tokens[i][j].getType() != TokenType.BASE){
					
					//Bei roten Token auf dem Feld
					if(tokens[i][j].getColor() == PlayerColor.RED){
						redTokenList.add(tokens[i][j]);
					}
					
					//Bei blauem Token auf dem Feld
					else{
						blueTokenList.add(tokens[i][j]);
					}
				}
			}
	}
	
	/**
	Die Methode vergleicht vorerst die Farbe der Spielsteine und bestimmt dadurch die gegnerischen
	Spielsteine, die den uebergebenen Spielstein zu schlagen gefaehrden.
	Dies geschieht anhand der Bewegungsreichweite(range), die die einzelnen Spielsteine besitzen.
	sollte eine Base uebergeben werden, so wird sie gecatcht und mit einem extremst hohen
	negativen Wert zugewiesen. Das soll verhindern, dass der Zug von der CPU ausgewaehlt wird.
	@param token ist der zubetrachtende Spielstein
	@return gibt die Anzahl der gegnerischen Spielsteine an, die den uebergebenen Token schlagen koennten
	*/
	public int checkIsEndangered(Token token){
		
		//Wie viele gegnerische Tokens bedrohen den Token
		int count = 0;
		Position tokenPosi = token.getPosition();
		
			//rote Spielsteine
			if(token.getColor() == PlayerColor.RED){
			
				//Iteriert über alle blauen Token und vergleicht Range mit Distance zum Token
				for(int i = 0; i < blueTokenList.size(); i++){
					if ((blueTokenList.get(i).getType()== TokenType.PAWN) && (blueTokenList.get(i).getRange() >= board.getDistance(tokenPosi, blueTokenList.get(i).getPosition()))){
						count++;
					}
				}
			}
			
			//blaue Spielsteine
			if(token.getColor() == PlayerColor.BLUE){
			
				//Iteriert über alle roten Token und vergleicht Range mit Distance zum Token
				for(int i = 0; i < redTokenList.size(); i++){
					if ((redTokenList.get(i).getType()==TokenType.PAWN) && (redTokenList.get(i).getRange() >= board.getDistance(tokenPosi, redTokenList.get(i).getPosition()))){
						count++;
					}
				}
			}
		
		
		return count;
	}
	
	
	//Ist der zuschlagende Stein von einem anderen token gecovert?
	protected int checkCovered(Token token){
		
		//Wie viele eigene Tokens decken den Token
		int count = 0;
		Position tokenPosi = token.getPosition();
		
			//blaue Spielsteine
			if(token.getColor() == PlayerColor.BLUE){
				//Iteriert über alle blauen Token und vergleicht Range mit Distance zum Token
				for(int i = 0; i < blueTokenList.size(); i++){
					if ((blueTokenList.get(i).getType()==TokenType.PAWN) && (blueTokenList.get(i).getRange() >= board.getDistance(tokenPosi, blueTokenList.get(i).getPosition()))){
						count++;
					}
				}
			}
			
			//rote Spielsteine
			if(token.getColor() == PlayerColor.RED){
				//Iteriert über alle roten Token und vergleicht Range mit Distance zum Token
				for(int i = 0; i < redTokenList.size(); i++){
					if ((redTokenList.get(i).getType()==TokenType.PAWN) && (redTokenList.get(i).getRange() >= board.getDistance(tokenPosi, redTokenList.get(i).getPosition()))){
						count++;
					}
				}
			}
		return count-1;	
	}	

	//wie viele Bauern um den Tower der selben Farbe stehen
	/*int surroundingTower(Tower tower){
		int count = 0;
		if (tower.getColor() == PlayerColor.RED){
			for(Token token : redTokenList){
				if (board.getDistance(tower.getPosition(), token.getPosition()) == 1 && token.getType() == TokenType.PAWN)
					count++;
			}
			
		} else 
			for(Token token : blueTokenList){
				if (board.getDistance(tower.getPosition(), token.getPosition()) == 1 && token.getType() == TokenType.PAWN)
					count++;
			}
		return count;
	}*/
	
	private boolean isWinning(Move move) {
		//Prüfen, ob der Zug überhaupt legal ist
		boolean hasMoves;
		if (board.isLegal(move)){
			//Wenn der Zug auf der Basis endet, handelt es sich um einen gewinnenden move
			if (board.findToken(move.getEnd()) != null && board.findToken(move.getEnd()).getType() == TokenType.BASE)
				return true;
			//Zug ausführen und anschließend checken, ob der Gegner noch einen möglichen Zug hat
			board.executeMove(move);
			hasMoves = board.hasLegalMove();
			//Zug rückgängig machen
			board.undoMove();
			//Wenn Aufgeben der einzige mögliche Zug des Gegners ist, führt der Zug zum Sieg
			if (hasMoves)
				return false;
		}
		return true;
	}
	
	/** Hilfsmethode f&uuml;r evaluateMove. Berechnet, ob der Zug eine Niederlage verhindern kann
	 *	@param move zu prüfender Move
	 *  @return true, falls es so ist, sonst false.
	 */
	private boolean willLose(Move move) {

		//Führt den übergebenen Zug aus, prüft ob der Gegner danach einen gewinnenden move ausführen könnte, und macht den ausgeführten zug rückgängig
		LinkedList<Move> legalMoves;
		board.executeMove(move);
		legalMoves = board.getLegalMoves();
		for(Move m : legalMoves){
			if (isWinning(m)){
				board.undoMove();
				return true;
			}
		}
		board.undoMove();
		//Wenn kein einziger gegnerischer gewinnnender Move gefunden wurde, wird der Gegner nicht nächste Runde gewinnen
		return false;
	}
	
	private int evaluateToken(Token token){
		int score = 0;
		int cover = checkCovered(token);
		int endangered = checkIsEndangered(token);
		int coveredScore = cover-endangered;
		
		
		//score -1000, wenn der Stein geschlagen werden kann und nicht ausreichend gedeckt ist
		//score +10, bei 1, +20 bei 2, +25 bei 3+ gedeckt.
		if(coveredScore <0)
			score-= isEndangered;
		else if(coveredScore > 0 && coveredScore <= 2)
			score+=10*coveredScore;
		else 
			score+=25;
		if(token.getType() == TokenType.PAWN)
			score += pawnValue;
		LinkedList<Position> list= board.getNeighborhood(token.getPosition(), token.getRange());
		score += list.size() * coveredTiles;
		return score;	
	}
	
	private int captureToken(Move move){
		TokenType tokenType;
		try{
		tokenType = board.findToken(move.getEnd()).getType();
		}catch(NullPointerException e){
			return 0;
		}
		if (tokenType == null)
				return 0;
		if (tokenType == TokenType.PAWN && (board.findToken(move.getStart()).getColor() != board.findToken(move.getEnd()).getColor()))
				return capturePawn;
		if (tokenType == TokenType.TOWER && (board.findToken(move.getStart()).getColor() != board.findToken(move.getEnd()).getColor())){
				Tower tower = (Tower)board.findToken(move.getEnd());
				return tower.getHeight()*captureTowerMult + captureTower;
		}
		return 0;
	}
	private boolean isRepeated(Move move){
		if(ownMoves.contains(move))
			return true;
		return false;
	}
	
	private int numberOfTokens(LinkedList<Token> list){
		int count = 0;
		for(Token token: list){
			if (token.getType()==TokenType.PAWN)
				count++;
			if (token.getType()==TokenType.TOWER){
				Tower tower = (Tower)token;
				count+= 1+tower.getHeight();
			}
				
		}
		return count;
	}
	
	private int baseIsProtected(){
		LinkedList<Token> tokenList;
		Position basePosition = color == PlayerColor.RED ? new Position(1,1) : new Position(board.getSize(), board.getSize());
		tokenList = color == PlayerColor.RED ? redTokenList : blueTokenList;
		for(Token token: tokenList){
			if (board.getDistance(token.getPosition(), basePosition) == 1 && token.getType() == TokenType.PAWN)
				return protectBase;
		}
		return 0;
	}
	
	//Initialisiert ggf einen Runner
	//Verrechnet einen Bonus, falls der Move ein passender Move des Runners ist
	private int runnerBonus(Move move){
		//Init runner
		if  (!hasRunner){
			int ownTokens = color == PlayerColor.RED ? numberOfTokens(redTokenList) : numberOfTokens(blueTokenList);
			int enemyTokens = color == PlayerColor.RED ? numberOfTokens(blueTokenList) : numberOfTokens(redTokenList);
			if(ownTokens - enemyTokens >= runnerInitFlat)
				hasRunner = true;
			else if (ownTokens - runnerInitMult * enemyTokens >= 0)
				hasRunner = true;
		}
		//wenn kein runner
		if (!hasRunner)
			return 0;
		//sonst
		else{
			if(isRunner(board.findToken(move.getStart()))){
				if (color == PlayerColor.RED){
					if(isDirectionBase(PlayerColor.BLUE, move)){
						return runnerBonus;
					}
				}else{
					if(isDirectionBase(PlayerColor.RED, move)){
						return runnerBonus;
					}
				}
			}
		}
		return 0;	
	}
	
	private boolean isRunner(Token token){
		//Position der gegnerischen Base
		Position enemyBase = color == PlayerColor.BLUE ? new Position(1,1) : new Position(board.getSize(), board.getSize());
		//Distance vom Token zur Base
		int distance = board.getDistance(enemyBase, token.getPosition());
		//Wählt die Liste der eigenen token aus
		LinkedList<Token> list = color == PlayerColor.RED ? redTokenList : blueTokenList;
		//Iteriert über die eigenen Token
		for(Token t: list){
			//Wenn ein anderer eigener token näher an der gegnerischen Base dran ist, false
			if (board.getDistance(enemyBase, t.getPosition()) < distance)
				return false;
		}
		//sonst true
		return true;
	}
	
	
	private boolean isDirectionBase(PlayerColor colour, Move move){
		int direction = move.getStart().getLetter() + move.getStart().getNumber() - move.getEnd().getLetter() - move.getEnd().getNumber();	
		if (direction > 0 && colour == PlayerColor.RED){
			return true;
		}
			
		if (direction < 0 && colour == PlayerColor.BLUE){
			return true;
		}
		else return false;
			
	}
	
	private int evaluateMove(Move move){
		//Absolut entscheidende Abfragen
		if (isWinning(move))
			return Integer.MAX_VALUE;
		if (willLose(move))
			return Integer.MIN_VALUE;
		
		
		board.executeMove(move);
		addTokensToLists();
		int score = 0;
		for(Token token : redTokenList)
			score += color == PlayerColor.BLUE ? -1*evaluateToken(token) : evaluateToken(token);
		for(Token token : blueTokenList)
			score += color == PlayerColor.BLUE ? evaluateToken(token) : -1*evaluateToken(token);
		board.undoMove();
		score+=captureToken(move);
		score+=runnerBonus(move);
		score+=baseIsProtected();
		//Verrechnet Bonus für Bewegungsrichtung eigene Base
		if (isDirectionBase(PlayerColor.BLUE, move))
			score+= color== PlayerColor.RED ? directionOwnBase : -1*directionOwnBase;
		if(isRepeated(move))
			score -= repeatMoveMalus*(repeatedMoves+1);
		return score;
	}
}

