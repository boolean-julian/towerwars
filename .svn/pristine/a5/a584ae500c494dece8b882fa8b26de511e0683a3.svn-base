package towerwarspp.gfx;

import java.awt.*;
import javax.swing.*;
import towerwarspp.preset.*;
import towerwarspp.board.*;

/** Klasse zur Darstellung der Spielfelder als JButtons 
 *	Erbt von JButton
 *	@author Julian L&uuml;ken
 */
public class HexagonButton extends JButton {
	/** Instanzvariable, die das Hexagon speichert */
	private Hexagon hexagon;
	/** Instanzvariable, die den Spielstein speichert */
	private Token 	token;
	
	/** Klassenvariablen zur Beschreibung der Farben der Buttons */
	private final static Color BORDER 	= new Color(0f,0f,0f);
	private final static Color RED 		= new Color(1f,0f,0f);
	private final static Color BLUE 	= new Color(0f,0f,1f);
	private final static Color EMPTY 	= new Color(1f,1f,1f);
	
	
	/** Default-Konstruktor */	
	public HexagonButton() {
		super();
		this.hexagon = null;
		this.token = null;
	}
	
	/** Konstruktor, der ein Hexagon und den dazugeh&ouml;rigen Spielstein entegegennimmt
	 *	@param hexagon Hexagon
	 *	@param token Spielstein
	 */
	public HexagonButton(Hexagon hexagon, Token token) {
		super();
		this.hexagon = hexagon;
		this.token = token;
	}

	/** Methode, die den Spielstein f&uuml;r gegebenen Button ausgibt */
	public Token getToken() {return token;}
	
	
	/** Zeichnet das Hexagon mit dem Spielstein darauf.
	 *	Diese Methode &uuml;berschreibt paintComponent von JButton.
	 *	@param g Graphics-Objekt
	 */
	@Override
	protected void paintComponent(Graphics g) {
		// zunaechst das Spielfeld selbst zeichnen lassen
		g.setColor(EMPTY);
		g.fillPolygon(hexagon);
		
		if (token != null) {
			// dann die Farbe des Spielsteins waehlen
			switch (token.getColor()) {
				case RED:
					g.setColor(RED);
					break;
				case BLUE:
					g.setColor(BLUE);
					break;
			}
			// dann die Form des Spielsteins waehlen und den Stein zeichnen lassen
			switch (token.getType()) {
				case PAWN:
					g.fillOval(hexagon.getRadius()*3/4,hexagon.getRadius()*3/4,hexagon.getRadius()/2,hexagon.getRadius()/2);
					break;
				case BASE:
					g.fillPolygon(hexagon);
					break;
				case TOWER:
					Tower tower = (Tower) token;
					g.fillOval(hexagon.getRadius()*1/2,hexagon.getRadius()*1/2,hexagon.getRadius(),hexagon.getRadius());
					g.setColor(EMPTY);
					g.drawString(tower.getHeight()+"",hexagon.getRadius(), hexagon.getRadius()	);
					if (tower.isBlocked()) {
						g.setColor(BLUE);
						g.fillOval(hexagon.getRadius()*1/2, hexagon.getRadius()*1/2,hexagon.getRadius()/3,hexagon.getRadius()/3);
					}
					break;
			}
		}
	}
	
	/** Methode, die die Gr&ouml;&szlig;e des HexagonButtons liefert. Diese ist notwendig f&uuml;r das darstellen als HexagonButton, da der HexagonButton sonst zu
	 *	klein oder zu gro&szlig; ist und somit die grafische Ausgabe des Hexagons und der HexagonButton inkompatible Gr&ouml;&szlig;en haben
	 *	@return Gr&ouml;&szlig;e
	 */
	@Override
	public Dimension getPreferredSize() {
		return new Dimension(hexagon.getRadius()*2, hexagon.getRadius()*2);
	}
	
	/** Methode, die den Rand des HexagonButtons in der Farbe BORDER zeichnet
	 *	@param g Graphics-Objekt
	 */
	@Override
	protected void paintBorder(Graphics g) {
		g.setColor(BORDER);
		g.drawPolygon(hexagon);
	}
	
	
	Shape shape;
	/** Methode, die die Form von JButton &uuml;berschreibt. Diese Methode ist unumg&auml;nglich, da ein JButton standardm&auml;&szlig;ig nur vier Ecken hat
	 *	@param x x-Koordinate
	 *	@param y y-Koordinate
	 *	@return true, falls (x,y) im HexagonButton liegt, sonst false
	 */
	public boolean contains(int x, int y) {
		if (shape == null || !shape.getBounds().equals(getBounds())) {
			shape = hexagon;
		}
		return shape.contains(x,y);
	}
}
