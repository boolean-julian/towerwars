package towerwarspp.gfx;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import towerwarspp.preset.*;
import towerwarspp.board.*;

/** Klasse zur Darstellung des Spielbretts
 *	@author Julian L&uuml;ken
 */
public class TowerWarsGUI implements Viewer, Requestable{
	// Eigenschaften des TowerWarsGUI
	/** darzustellendes Board */
	private BasicBoard board;
	/** Radius der Sechsecke */
	private int hexaSize;
	/** Raster aus HexagonButtons bildet das Spielfeld */
	private HexagonButton[][] buttons;
	
	private Position start;
	private Position end;
	private boolean first;
	
	// Swing-Elemente
	/** Fenster */
	private JFrame frame;
	/** Panel f&uuml;r das Spielfeld */
	private JPanel panel;
	
	// Konstruktoren
	/** Konstruktor, der das Spielbrett entegegennimmt. Setzt die Gr&ouml;&szlig;e der Hexagons auf 30px
	 *	@param hexaSize Gr&ouml;&szlig;e
	 */
	public TowerWarsGUI(BasicBoard board) {
		this.board = board;
		this.hexaSize = 30;
		this.first = true;
	}
	/** Konstruktor, der das Spielbrett und die Gr&ouml;&szlig;e der Hexagons entgegennimmt
	 *	@param board Spielbrett
	 *	@param hexaSize Gr&ouml;&szlig;e
	 */
	public TowerWarsGUI(BasicBoard board, int hexaSize) {
		this.board = board;
		this.hexaSize = hexaSize;
		this.first = true;
	}
	
	// set/get
	public BasicBoard getBoard()			{return board;}
	public int getHexaSize() 				{return hexaSize;}
	public HexagonButton[][] getButtons() 	{return buttons;}
	
	public void setStart(Position start)	{this.start = start;}
	public void setEnd	(Position end) 		{this.end = end;}
	public void setFirst(boolean first)		{this.first = first;}
	
	
	/** Methode, die das Fenster initialisiert und das Spielfeld darstellt */
	public void createAndShowGUI() {
		frame = new JFrame("Testklasse fuer Hexagon");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		panel = new JPanel();
		
		update();
		
		frame.setSize(board.getSize()*hexaSize*3, board.getSize()*hexaSize*2);
		frame.setVisible(true);
	}
	
	/** Methode, die das JPanel, in dem das Spielfeld liegt, aktualisiert */
	public void update() {
		int padding = hexaSize / 2;
		
		panel.removeAll();

		panel.setLayout(null);
		
		Token[][] tokens = board.getTokens();
		buttons = new HexagonButton[board.getSize()][board.getSize()];
		
		int rowPadding = 0;
		for (int i = 0; i < board.getSize(); i++) {
			for (int j = 0; j < board.getSize(); j++) {
				buttons[i][j] = new HexagonButton(new Hexagon(hexaSize),tokens[i][j]);
				buttons[i][j].setBounds(i*2*hexaSize+j*hexaSize+padding, (j*2*hexaSize-j*hexaSize/4)+padding, 2*hexaSize, 2*hexaSize);
				
				buttons[i][j].addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						if (first) {
							for (int i = 0; i < getBoard().getSize(); i++) {
								for (int j = 0; j < getBoard().getSize(); j++) {
									if (e.getSource() == buttons[i][j]) {
										Position start = new Position(i+1,j+1);
										setStart(start);
										System.out.println("start: " + start);
										setFirst(false);
									}
								}
							}
						}
						else if (!first) {
							for (int i = 0; i < getBoard().getSize(); i++) {
								for (int j = 0; j < getBoard().getSize(); j++) {
									if (e.getSource() == buttons[i][j]) {
										Position end = new Position(i+1,j+1);
										setEnd(end);
										System.out.println("end: " + end);
										setFirst(true);
									}
								}
							}
						}
					}	
				});
				panel.add(buttons[i][j]);
			}
		}
		frame.add(panel);

		frame.revalidate();
		panel.repaint();
	}
	
	// ueberschreibfick
	@Override
	public Status getStatus() {return board.getStatus();}
	@Override
	public int getTurn() {return board.getTurn();}
	@Override
	public int getSize() {return board.getSize();}
	@Override
	public Move deliver() {	
		return null;
	}
}
